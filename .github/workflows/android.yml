name: android
on:
  push:
    tags:
      - "*"
  pull_request:
    branches: ["main"]

jobs:
  android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opencv-version: [4.10.0]
        abi: [armeabi-v7a, arm64-v8a, x86_64]
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
        -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
        -DANDROID_PLATFORM=android-24 \
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
        -DANDROID_STL=c++_static \
    steps:
      - uses: actions/checkout@v4
      - name: setup-opencv-source
        run: |
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git opencv
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git opencv_contrib
          echo "SOURCE_DIR=opencv" >> "$GITHUB_ENV"
          echo "PACKAGE_NAME=libopencv-android-${{ matrix.abi }}" >> "$GITHUB_ENV"
      - name: setup ffmpeg
        run: |
          wget -q -O ffmpeg.tar.xz https://sourceforge.net/projects/avbuild/files/android/ffmpeg-6.1-android-lite.tar.xz
          mkdir -p ffmpeg
          tar xvf ffmpeg.tar.xz -C ffmpeg --strip-components=1
          mkdir -p ${{ github.workspace }}/ffmpeg/cmake
          cp ${{ github.workspace }}/cmake/ffmpeg-config.cmake ${{ github.workspace }}/ffmpeg/cmake/
          echo "FFMPEG_ROOT=${{ github.workspace }}/ffmpeg" >> "$GITHUB_ENV"
      - name: build
        run: |
          echo "$GITHUB_ENV"
          cd ${{ env.SOURCE_DIR }}
          mkdir build && cd build
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DANDROID_ABI="${{ matrix.abi }}" \
            -DANDROID_ARM_NEON=ON \
            `cat ${{ github.workspace }}/options.txt` \
            -DOPENCV_EXTRA_MODULES_PATH="${{ github.workspace }}/opencv_contrib/modules" \
            -DBUILD_opencv_world=OFF \
            -DFFMPEG_DIR="${{ env.FFMPEG_ROOT }}/cmake" \
            -DFFMPEG_ARCH="${{ matrix.abi }}" \
            -DCMAKE_POLICY_DEFAULT_CMP0074=NEW \
            ..
          cmake --build . -j $(nproc)
          cmake --build . --target install

      - name: package
        run: |
          mkdir -p ${{ env.PACKAGE_NAME }}/
          cp -rf ${{ env.SOURCE_DIR }}/build/install/* ${{ env.PACKAGE_NAME }}/

          tree -L 3 ${{ env.FFMPEG_ROOT }}

          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg
          cp -rf ${{ env.FFMPEG_ROOT }}/include ${{ env.PACKAGE_NAME }}/ffmpeg/
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          cp -rf ${{ env.FFMPEG_ROOT }}/bin/${{ matrix.abi }} ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/lib/${{ matrix.abi }} ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/cmake ${{ env.PACKAGE_NAME }}/ffmpeg/cmake
          cp -rf ${{ env.FFMPEG_ROOT }}/Changelog ${{ env.PACKAGE_NAME }}/ffmpeg/Changelog
          cp -rf ${{ env.FFMPEG_ROOT }}/config-${{ matrix.abi }}.txt ${{ env.PACKAGE_NAME }}/ffmpeg/config.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/COPYING.LGPLv2.1 ${{ env.PACKAGE_NAME }}/ffmpeg/COPYING.LGPLv2.1
          cp -rf ${{ env.FFMPEG_ROOT }}/README.txt ${{ env.PACKAGE_NAME }}/ffmpeg/README.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/RELEASE_NOTES ${{ env.PACKAGE_NAME }}/ffmpeg/RELEASE_NOTES

          tar -C ${{ env.PACKAGE_NAME }} -zcvf ${{ env.PACKAGE_NAME }}.tar.gz .
      - name: test
        run: |
          cd test
          mkdir build && cd build
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DANDROID_ABI="${{ matrix.abi }}" \
            -DANDROID_ARM_NEON=ON \
            -DOpenCV_DIR=${{ github.workspace }}/${{ env.PACKAGE_NAME }}/sdk/native/jni \
            ..
          cmake --build . -j $(nproc)
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.tar.gz
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: false
          files: |
            ${{ env.PACKAGE_NAME }}.tar.gz
