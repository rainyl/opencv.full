name: linux
on:
  push:
    tags:
      - "*"
  pull_request:
    branches: ["main"]

jobs:
  armlinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opencv-version: [4.10.0]
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
      - name: setup
        run: |
          sudo apt-get update
          sudo apt-get install g++-arm-linux-gnueabi g++-arm-linux-gnueabihf g++-aarch64-linux-gnu

      - uses: actions/checkout@v4
      - name: setup-opencv-source
        run: |
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git opencv
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git opencv_contrib
          echo "SOURCE_DIR=${{ github.workspace }}/opencv" >> $GITHUB_ENV
          echo "PACKAGE_NAME=libopencv-linux-arm64" >> $GITHUB_ENV
          echo "OPENCV_SUBDIR=lib/cmake/opencv4" >> $GITHUB_ENV
      - name: setup ffmpeg
        run: |
          wget -q -O ffmpeg.tar.xz https://sourceforge.net/projects/avbuild/files/linux/ffmpeg-6.1-linux-clang-default.tar.xz
          mkdir -p ffmpeg
          tar xvf ffmpeg.tar.xz -C ffmpeg --strip-components=1
          mkdir -p ${{ github.workspace }}/ffmpeg/cmake
          cp ${{ github.workspace }}/cmake/ffmpeg-config.cmake ${{ github.workspace }}/ffmpeg/cmake/
          echo "FFMPEG_ROOT=${{ github.workspace }}/ffmpeg" >> $GITHUB_ENV
      - name: build-aarch64-linux-gnu
        run: |
          cd ${{ env.SOURCE_DIR }}
          mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DOPENCV_EXTRA_MODULES_PATH="${{ github.workspace }}/opencv_contrib/modules" \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/aarch64-linux-gnu.toolchain.cmake \
            `cat ${{ github.workspace }}/options.txt` \
            -DFFMPEG_DIR="${{ env.FFMPEG_ROOT }}/cmake" \
            -DOPENCV_FFMPEG_USE_FIND_PACKAGE=ON \
            -DCMAKE_POLICY_DEFAULT_CMP0074=NEW \
            -DBUILD_opencv_world=OFF \
            -DFFMPEG_ARCH=arm64 ..
          cmake --build . -j $(nproc)
          cmake --build . --target install
      - name: package
        run: |
          mkdir ${{ env.PACKAGE_NAME }}
          cp -rf ${{ env.SOURCE_DIR }}/build-aarch64-linux-gnu/install/* ${{ env.PACKAGE_NAME }}/

          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg
          cp -rf ${{ env.FFMPEG_ROOT }}/include ${{ env.PACKAGE_NAME }}/ffmpeg/
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          cp -rf ${{ env.FFMPEG_ROOT }}/bin/arm64 ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/lib/arm64 ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/cmake ${{ env.PACKAGE_NAME }}/ffmpeg/cmake
          cp -rf ${{ env.FFMPEG_ROOT }}/Changelog ${{ env.PACKAGE_NAME }}/ffmpeg/Changelog
          cp -rf ${{ env.FFMPEG_ROOT }}/config-arm64.txt ${{ env.PACKAGE_NAME }}/ffmpeg/config.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/COPYING.LGPLv2.1 ${{ env.PACKAGE_NAME }}/ffmpeg/COPYING.LGPLv2.1
          cp -rf ${{ env.FFMPEG_ROOT }}/README.txt ${{ env.PACKAGE_NAME }}/ffmpeg/README.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/RELEASE_NOTES ${{ env.PACKAGE_NAME }}/ffmpeg/RELEASE_NOTES

          tar -C ${{ env.PACKAGE_NAME }} -zcvf ${{ env.PACKAGE_NAME }}.tar.gz .
      - name: test-aarch64-linux-gnu
        run: |
          cd test
          mkdir build-aarch64-linux-gnu && cd build-aarch64-linux-gnu
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/aarch64-linux-gnu.toolchain.cmake \
            -DOpenCV_DIR=${{ github.workspace }}/${{ env.PACKAGE_NAME }}/${{ env.OPENCV_SUBDIR }} ..
          cmake --build . -j $(nproc)
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.tar.gz
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: false
          files: |
            ${{ env.PACKAGE_NAME }}.tar.gz

  linux:
    strategy:
      matrix:
        opencv-version: [4.10.0]
    runs-on: ubuntu-22.04
    env:
      COMMON_CMAKE_OPTIONS: |
        -DCMAKE_INSTALL_PREFIX=install \
        -DCMAKE_BUILD_TYPE=Release \
    steps:
      - uses: actions/checkout@v4
      - name: setup
        run: |
          sudo apt-get update
          sudo apt-get install libgtk-3-dev
      - name: setup-opencv-source
        run: |
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv.git opencv
          git clone -b ${{ matrix.opencv-version }} https://github.com/opencv/opencv_contrib.git opencv_contrib
          echo "SOURCE_DIR=${{ github.workspace }}/opencv" >> $GITHUB_ENV
          echo "PACKAGE_NAME=libopencv-linux-x64" >> $GITHUB_ENV
      - name: setup ffmpeg
        run: |
          wget -q -O ffmpeg.tar.xz https://sourceforge.net/projects/avbuild/files/linux/ffmpeg-6.1-linux-clang-default.tar.xz
          mkdir -p ffmpeg
          tar xvf ffmpeg.tar.xz -C ffmpeg --strip-components=1
          mkdir -p ${{ github.workspace }}/ffmpeg/cmake
          cp ${{ github.workspace }}/cmake/ffmpeg-config.cmake ${{ github.workspace }}/ffmpeg/cmake/
          echo "FFMPEG_ROOT=${{ github.workspace }}/ffmpeg" >> $GITHUB_ENV
      - name: build
        run: |
          cd ${{ env.SOURCE_DIR }}
          mkdir build && cd build
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DOPENCV_EXTRA_MODULES_PATH="${{ github.workspace }}/opencv_contrib/modules" \
            `cat ${{ github.workspace }}/options.txt` \
            -DFFMPEG_DIR="${{ env.FFMPEG_ROOT }}/cmake" \
            -DOPENCV_FFMPEG_USE_FIND_PACKAGE=ON \
            -DCMAKE_POLICY_DEFAULT_CMP0074=NEW \
            -DFFMPEG_ARCH=amd64 ..
          cmake --build . -j $(nproc)
          cmake --build . --target install
      - name: package
        run: |
          mkdir ${{ env.PACKAGE_NAME }}
          cp -rf ${{ env.SOURCE_DIR }}/build/install/* ${{ env.PACKAGE_NAME }}/

          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg
          cp -rf ${{ env.FFMPEG_ROOT }}/include ${{ env.PACKAGE_NAME }}/ffmpeg/
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          cp -rf ${{ env.FFMPEG_ROOT }}/bin/amd64 ${{ env.PACKAGE_NAME }}/ffmpeg/bin
          mkdir -p ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/lib/amd64 ${{ env.PACKAGE_NAME }}/ffmpeg/lib
          cp -rf ${{ env.FFMPEG_ROOT }}/cmake ${{ env.PACKAGE_NAME }}/ffmpeg/cmake
          cp -rf ${{ env.FFMPEG_ROOT }}/Changelog ${{ env.PACKAGE_NAME }}/ffmpeg/Changelog
          cp -rf ${{ env.FFMPEG_ROOT }}/config-amd64.txt ${{ env.PACKAGE_NAME }}/ffmpeg/config.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/COPYING.LGPLv2.1 ${{ env.PACKAGE_NAME }}/ffmpeg/COPYING.LGPLv2.1
          cp -rf ${{ env.FFMPEG_ROOT }}/README.txt ${{ env.PACKAGE_NAME }}/ffmpeg/README.txt
          cp -rf ${{ env.FFMPEG_ROOT }}/RELEASE_NOTES ${{ env.PACKAGE_NAME }}/ffmpeg/RELEASE_NOTES

          tar -C ${{ env.PACKAGE_NAME }} -zcvf ${{ env.PACKAGE_NAME }}.tar.gz .
      - name: set-opencv-dir
        if: matrix.opencv-version == '4.10.0'
        run: echo "OPENCV_SUBDIR=lib/cmake/opencv4" >> $GITHUB_ENV
      - name: test
        run: |
          cd test
          mkdir build && cd build
          cmake ${{ env.COMMON_CMAKE_OPTIONS }} \
            -DOpenCV_DIR=${{ github.workspace }}/${{ env.PACKAGE_NAME }}/${{ env.OPENCV_SUBDIR }} ..
          cmake --build . -j $(nproc)
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ${{ env.PACKAGE_NAME }}.tar.gz
      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          prerelease: false
          files: |
            ${{ env.PACKAGE_NAME }}.tar.gz

  # release:
  #   permissions:
  #     contents: write  # for softprops/action-gh-release to create a release
  #   needs: [armlinux, ubuntu]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: download
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: artifacts

  #   - name: create-release
  #     uses: softprops/action-gh-release@v2
  #     if: startsWith(github.ref, 'refs/tags/')
  #     with:
  #       draft: true
  #       prerelease: false
  #       token: ${{ secrets.GITHUB_TOKEN }}
  #       files: artifacts/*/*.tar.gz
